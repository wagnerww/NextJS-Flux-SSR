{"ast":null,"code":"/*import { createStore, compose, applyMiddleware } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport nextReduxWrapper from \"next-redux-wrapper\";\nimport nextReduxSaga from \"next-redux-saga\";\n\nimport rootReducer from \"./rootReducer\";\nimport rootSaga from \"./rootSaga\";\n\nconst sagaMonitor =\n  process.env.NODE_ENV === \"development\"\n    ? console.tron.createSagaMonitor()\n    : null;\nconst sagaMiddleware = createSagaMiddleware({ sagaMonitor });\n\nexport function configureStore(initialState = {}) {\n  const store = createStore(\n    rootReducer,\n    initialState,\n    compose(\n      applyMiddleware(sagaMiddleware),\n      createAppropriateStore()\n    )\n  );\n\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n\n  if (process.env.NODE_ENV === \"development\") {\n    console.tron.log(store.getState());\n  }\n\n  return store;\n}\n\nexport default function(BaseComponent) {\n  return nextReduxWrapper(configureStore)(nextReduxSaga(BaseComponent));\n}\n*/\nimport { applyMiddleware, createStore } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport rootReducer from \"./rootReducer\";\nimport rootSaga from \"./rootSaga\";\nvar sagaMonitor = process.env.NODE_ENV === \"development\" ? console.tron.createSagaMonitor() : null;\nvar sagaMiddleware = createSagaMiddleware({\n  sagaMonitor: sagaMonitor\n});\nmiddleware.push(sagaMiddleware);\nvar createAppropriateStore = process.env.NODE_ENV === \"development\" ? console.tron.createEnhancer : function () {};\nexport function configureStore() {\n  var initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var store = createStore(rootReducer, initialState, compose(applyMiddleware(sagaMiddleware), createAppropriateStore()));\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n  return store;\n}\nexport default configureStore;","map":{"version":3,"sources":["/Users/wagnerricardo/Documents/dev/react/nextJS-Sagas/src/store/index.js"],"names":["applyMiddleware","createStore","createSagaMiddleware","rootReducer","rootSaga","sagaMonitor","process","env","NODE_ENV","console","tron","createSagaMonitor","sagaMiddleware","middleware","push","createAppropriateStore","createEnhancer","configureStore","initialState","store","compose","sagaTask","run"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsCA,SAASA,eAAT,EAA0BC,WAA1B,QAA6C,OAA7C;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AAEA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,QAAP,MAAqB,YAArB;AAEA,IAAMC,WAAW,GACfC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAAzB,GACIC,OAAO,CAACC,IAAR,CAAaC,iBAAb,EADJ,GAEI,IAHN;AAIA,IAAMC,cAAc,GAAGV,oBAAoB,CAAC;AAAEG,EAAAA,WAAW,EAAXA;AAAF,CAAD,CAA3C;AAEAQ,UAAU,CAACC,IAAX,CAAgBF,cAAhB;AAEA,IAAMG,sBAAsB,GAC1BT,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAAzB,GACIC,OAAO,CAACC,IAAR,CAAaM,cADjB,GAEI,YAAM,CAAE,CAHd;AAKA,OAAO,SAASC,cAAT,GAA2C;AAAA,MAAnBC,YAAmB,uEAAJ,EAAI;AAChD,MAAMC,KAAK,GAAGlB,WAAW,CACvBE,WADuB,EAEvBe,YAFuB,EAGvBE,OAAO,CACLpB,eAAe,CAACY,cAAD,CADV,EAELG,sBAAsB,EAFjB,CAHgB,CAAzB;AASAI,EAAAA,KAAK,CAACE,QAAN,GAAiBT,cAAc,CAACU,GAAf,CAAmBlB,QAAnB,CAAjB;AAEA,SAAOe,KAAP;AACD;AAED,eAAeF,cAAf","sourcesContent":["/*import { createStore, compose, applyMiddleware } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport nextReduxWrapper from \"next-redux-wrapper\";\nimport nextReduxSaga from \"next-redux-saga\";\n\nimport rootReducer from \"./rootReducer\";\nimport rootSaga from \"./rootSaga\";\n\nconst sagaMonitor =\n  process.env.NODE_ENV === \"development\"\n    ? console.tron.createSagaMonitor()\n    : null;\nconst sagaMiddleware = createSagaMiddleware({ sagaMonitor });\n\nexport function configureStore(initialState = {}) {\n  const store = createStore(\n    rootReducer,\n    initialState,\n    compose(\n      applyMiddleware(sagaMiddleware),\n      createAppropriateStore()\n    )\n  );\n\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n\n  if (process.env.NODE_ENV === \"development\") {\n    console.tron.log(store.getState());\n  }\n\n  return store;\n}\n\nexport default function(BaseComponent) {\n  return nextReduxWrapper(configureStore)(nextReduxSaga(BaseComponent));\n}\n*/\n\nimport { applyMiddleware, createStore } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\n\nimport rootReducer from \"./rootReducer\";\nimport rootSaga from \"./rootSaga\";\n\nconst sagaMonitor =\n  process.env.NODE_ENV === \"development\"\n    ? console.tron.createSagaMonitor()\n    : null;\nconst sagaMiddleware = createSagaMiddleware({ sagaMonitor });\n\nmiddleware.push(sagaMiddleware);\n\nconst createAppropriateStore =\n  process.env.NODE_ENV === \"development\"\n    ? console.tron.createEnhancer\n    : () => {};\n\nexport function configureStore(initialState = {}) {\n  const store = createStore(\n    rootReducer,\n    initialState,\n    compose(\n      applyMiddleware(sagaMiddleware),\n      createAppropriateStore()\n    )\n  );\n\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n\n  return store;\n}\n\nexport default configureStore;\n"]},"metadata":{},"sourceType":"module"}